{"version":3,"file":"static/js/800.11a68f59.chunk.js","mappings":"oKAEA,MAuCA,EAvC4B,WAAyB,IAAxBA,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACxC,MAAOG,EAAWC,IAAgBC,EAAAA,EAAAA,UAASN,GAmC3C,OAjCAO,EAAAA,EAAAA,YAAU,KAEN,MAAMC,EAAkBA,KAEpB,MAAMC,EAAW,4BAA4BC,KAAKC,UAAUC,WAGtDC,EAAcC,OAAOC,WAIvBV,EAFAI,EAEaO,KAAKC,IAAI,IAAKjB,GACpBa,EAAc,IAERG,KAAKC,IAAI,IAAKjB,GACpBa,EAAc,KAERb,EAGAgB,KAAKC,IAAI,IAAoB,IAAfjB,GAC/B,EAOJ,OAHAQ,IACAM,OAAOI,iBAAiB,SAAUV,GAE3B,KACHM,OAAOK,oBAAoB,SAAUX,EAAgB,CACxD,GACF,CAACR,IAEGI,CACX,E,aCjCA,MAAMgB,EAAgBA,CAACH,EAAKI,IAAQL,KAAKM,UAAYD,EAAMJ,GAAOA,EAG5DM,EAAeA,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,UAGXC,GAAWC,EAAAA,EAAAA,UAAQ,IAAM,CAC3BP,GAAe,GAAI,IACnBA,GAAe,GAAI,IACnBA,GAAe,IAAK,KACrB,IAGGQ,GAAQD,EAAAA,EAAAA,UAAQ,IAAMP,EAAc,GAAK,KAAM,IAWrD,OARAS,EAAAA,EAAAA,IAASC,IAAgB,IAAf,MAAEC,GAAOD,EACf,MAAME,EAAOD,EAAME,iBACfT,EAASU,UAETV,EAASU,QAAQC,SAASC,QAA6C,GAAnCpB,KAAKqB,IAAIrB,KAAKsB,IAAIN,EAAOJ,IAAgB,GACjF,KAIAW,EAAAA,EAAAA,MAAA,QAAMC,IAAKhB,EAAUE,SAAUA,EAASe,SAAA,EACpCC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,IAAM,MAC7BD,EAAAA,EAAAA,KAAA,qBACIE,MAAM,UACNC,SAAUC,EAAAA,IACVC,aAAa,MAEd,EAKTC,EAAQC,IAAsB,IAArB,MAAEC,EAAQ,KAAKD,EAC1B,OACIP,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,SACKW,MAAMC,KAAK,CAAEnD,OAAQgD,IAASI,KAAI,CAACC,EAAGC,KACnCd,EAAAA,EAAAA,KAACnB,EAAY,GAAMiC,MAExB,EAKLC,EAAiBA,KAEff,EAAAA,EAAAA,KAAA,OACIgB,MAAO,CACHhC,SAAU,QACViC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,QAAS,EACTC,gBAAiB,aAkCjC,EA3ByBC,KACrB,MAAM7D,EAAY8D,EAAoB,KAEtC,OACIxB,EAAAA,EAAAA,KAAA,OAAKyB,UAAU,oBAAmB1B,UAC9BC,EAAAA,EAAAA,KAAC0B,EAAAA,SAAQ,CAACC,UAAU3B,EAAAA,EAAAA,KAACe,EAAc,IAAIhB,UACnCC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAM,CACHC,IAAK,CAAC,EAAG,GACTC,OAAQ,CAAE9C,SAAU,CAAC,EAAG,EAAG,GAAI+C,IAAK,IACpCf,MAAO,CACHhC,SAAU,QACViC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,QAAS,EACTC,gBAAiB,eAErBU,YAAa,CAAEzD,IAAK,IAAOwB,UAE3BC,EAAAA,EAAAA,KAACM,EAAK,CAACE,MAAO9C,SAGpB,C","sources":["hooks/useStarryBackground.js","components/StarryBackground.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useStarryBackground = (initialCount = 200) => {\r\n    const [starCount, setStarCount] = useState(initialCount);\r\n\r\n    useEffect(() => {\r\n        // Adjust star count based on device performance\r\n        const adjustStarCount = () => {\r\n            // Check for mobile devices which typically have lower performance\r\n            const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\n            // Check screen width to adjust density\r\n            const screenWidth = window.innerWidth;\r\n\r\n            if (isMobile) {\r\n                // Reduce stars on mobile devices\r\n                setStarCount(Math.min(100, initialCount));\r\n            } else if (screenWidth < 768) {\r\n                // Small screens\r\n                setStarCount(Math.min(150, initialCount));\r\n            } else if (screenWidth < 1200) {\r\n                // Medium screens\r\n                setStarCount(initialCount);\r\n            } else {\r\n                // Large screens can handle more stars\r\n                setStarCount(Math.min(300, initialCount * 1.5));\r\n            }\r\n        };\r\n\r\n        // Adjust initially and on window resize\r\n        adjustStarCount();\r\n        window.addEventListener('resize', adjustStarCount);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', adjustStarCount);\r\n        };\r\n    }, [initialCount]);\r\n\r\n    return starCount;\r\n};\r\n\r\nexport default useStarryBackground; ","import React, { useMemo, useRef, Suspense, lazy } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { AdditiveBlending } from 'three';\nimport useStarryBackground from '../hooks/useStarryBackground';\n\n// A simple random function that we'll use to generate stars at random positions\nconst randomInRange = (min, max) => Math.random() * (max - min) + min;\n\n// Create a single star particle\nconst StarParticle = () => {\n    const particle = useRef();\n\n    // Set random position for each star\n    const position = useMemo(() => [\n        randomInRange(-50, 50),  // x\n        randomInRange(-30, 30),  // y\n        randomInRange(-10, -5)   // z (slightly negative to be \"behind\" the camera)\n    ], []);\n\n    // Set random speed for twinkling effect\n    const speed = useMemo(() => randomInRange(0.3, 0.5), []);\n\n    // Animate the star's brightness using opacity\n    useFrame(({ clock }) => {\n        const time = clock.getElapsedTime();\n        if (particle.current) {\n            // Create a subtle twinkling effect\n            particle.current.material.opacity = Math.abs(Math.sin(time * speed)) * 0.5 + 0.5;\n        }\n    });\n\n    return (\n        <mesh ref={particle} position={position}>\n            <circleGeometry args={[0.05, 5]} />\n            <meshBasicMaterial\n                color=\"#ffffff\"\n                blending={AdditiveBlending}\n                transparent={true}\n            />\n        </mesh>\n    );\n};\n\n// Create a group of stars\nconst Stars = ({ count = 400 }) => {\n    return (\n        <>\n            {Array.from({ length: count }).map((_, i) => (\n                <StarParticle key={i} />\n            ))}\n        </>\n    );\n};\n\n// Fallback placeholder when stars are loading\nconst StarryFallback = () => {\n    return (\n        <div\n            style={{\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                zIndex: -1,\n                backgroundColor: '#121212',\n            }}\n        ></div>\n    );\n};\n\n// Main component that wraps everything\nconst StarryBackground = () => {\n    const starCount = useStarryBackground(200);\n\n    return (\n        <div className=\"starry-background\">\n            <Suspense fallback={<StarryFallback />}>\n                <Canvas\n                    dpr={[1, 2]}\n                    camera={{ position: [0, 0, 5], fov: 75 }}\n                    style={{\n                        position: 'fixed',\n                        top: 0,\n                        left: 0,\n                        width: '100%',\n                        height: '100%',\n                        zIndex: -1,\n                        backgroundColor: 'transparent',\n                    }}\n                    performance={{ min: 0.1 }} // Improve performance\n                >\n                    <Stars count={starCount} />\n                </Canvas>\n            </Suspense>\n        </div>\n    );\n};\n\nexport default StarryBackground; "],"names":["initialCount","arguments","length","undefined","starCount","setStarCount","useState","useEffect","adjustStarCount","isMobile","test","navigator","userAgent","screenWidth","window","innerWidth","Math","min","addEventListener","removeEventListener","randomInRange","max","random","StarParticle","particle","useRef","position","useMemo","speed","useFrame","_ref","clock","time","getElapsedTime","current","material","opacity","abs","sin","_jsxs","ref","children","_jsx","args","color","blending","AdditiveBlending","transparent","Stars","_ref2","count","_Fragment","Array","from","map","_","i","StarryFallback","style","top","left","width","height","zIndex","backgroundColor","StarryBackground","useStarryBackground","className","Suspense","fallback","Canvas","dpr","camera","fov","performance"],"sourceRoot":""}